#!/usr/bin/env python3
"""
Otimizador INTELIGENTE de Imagens em PDFs
Script Python avan√ßado para compress√£o inteligente de arquivos PDF.
"""

import os
import io
import logging
import tempfile
import shutil
from typing import Dict, Any, Tuple, List
from pathlib import Path

# Constantes para otimiza√ß√£o de imagens
class ImageOptimizerConstants:
    """Constantes para otimiza√ß√£o de imagens PDF."""
    # Thresholds de tamanho
    LARGE_IMAGE_SIZE = 1024 * 1024  # 1MB - VALOR CR√çTICO testado
    LARGE_DIMENSION_THRESHOLD = 3000
    SAMPLE_SIZE = 100
    
    # Qualidades JPEG
    JPEG_QUALITY_LARGE = 95
    JPEG_QUALITY_MEDIUM = 97 
    JPEG_QUALITY_SMALL = 98
    
    # Thresholds de pixels
    LARGE_IMAGE_PIXELS = 2000000
    MEDIUM_IMAGE_PIXELS = 500000
    
    # Configura√ß√µes PNG
    PNG_MAX_COLORS = 128
    PNG_VERY_SIMPLE_COLORS = 16
    PNG_COMPRESS_LEVEL = 6
    
    # Redimensionamento
    MAX_USEFUL_DIMENSION = 2500
    MIN_DIMENSION = 100
    
    # An√°lise de cores
    COLOR_RATIO_THRESHOLD = 0.05
    COMPRESSION_THRESHOLD = 0.90  # 90% do tamanho original

try:
    import fitz  # PyMuPDF
    HAS_PYMUPDF = True
except ImportError:
    HAS_PYMUPDF = False
    
try:
    from PIL import Image, ImageOps
    HAS_PIL = True
except ImportError:
    HAS_PIL = False

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def optimize_pdf_images(input_path: str, output_path: str, quality: str = 'smart') -> Dict[str, Any]:
    """
    Otimiza arquivos PDF com compress√£o INTELIGENTE de imagens.
    
    ‚ö†Ô∏è‚ö†Ô∏è CONFIGURA√á√ÉO CR√çTICA TESTADA ‚ö†Ô∏è‚ö†Ô∏è
    NUNCA alterar: original_size > 1024 * 1024 (linha ~281)
    Este √© o √öNICO valor que funciona sem destruir arquivos!
    Qualquer outro limite causar√° problemas no PDF final!
    
    Esta fun√ß√£o implementa estrat√©gia de preserva√ß√£o com limpeza suave:
    - Preserva qualidade m√°xima das imagens (JPEG 95-98)
    - Redimensiona apenas se extremamente grandes (>3000px)
    - Remove metadados e otimiza estruturas
    - Foco na limpeza sem comprometer qualidade visual
    
    Args:
        input_path (str): Caminho para o arquivo PDF original
        output_path (str): Caminho para salvar o arquivo PDF limpo
        quality (str): N√≠vel de processamento (apenas 'smart' suportado)
    
    Returns:
        Dict[str, Any]: Dicion√°rio com estat√≠sticas do processamento contendo:
            - success (bool): Se a opera√ß√£o foi bem-sucedida
            - original_size (int): Tamanho original em bytes
            - final_size (int): Tamanho final em bytes
            - compression_ratio (float): Porcentagem de redu√ß√£o
            - images_processed (int): N√∫mero de imagens processadas
            - pages_processed (int): N√∫mero de p√°ginas processadas
            - jpeg_images (int): Imagens JPEG processadas
            - png_images (int): Imagens PNG processadas
            - resized_images (int): N√∫mero de imagens redimensionadas (>2000px)
            - error_message (str): Mensagem de erro, se houver
    
    Raises:
        RuntimeError: Se PyMuPDF n√£o estiver instalado
        FileNotFoundError: Se o arquivo de entrada n√£o existir
        ValueError: Se o n√≠vel de qualidade for inv√°lido
        Exception: Para outros erros durante o processamento
    """
    
    # Verificar depend√™ncias
    if not HAS_PYMUPDF:
        raise RuntimeError("PyMuPDF (fitz) √© obrigat√≥rio. Execute: pip install PyMuPDF")
    
    # Verificar arquivo de entrada
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {input_path}")
    
    # Apenas n√≠vel 'smart' √© suportado
    if quality != 'smart':
        logger.warning(f"N√≠vel '{quality}' n√£o suportado. Usando 'smart'.")
        quality = 'smart'
    
    # Estat√≠sticas iniciais
    original_size = os.path.getsize(input_path)
    images_processed = 0
    pages_processed = 0
    jpeg_images = 0
    png_images = 0 
    resized_images = 0
    
    logger.info(f"üéØ Iniciando processamento de PDF com preserva√ß√£o m√°xima: {Path(input_path).name}")
    logger.info(f"üìä Tamanho original: {original_size / 1024 / 1024:.2f} MB")
    logger.info(f"üéØ Modo: {quality} (Preserva√ß√£o m√°xima de qualidade, otimiza√ß√£o suave apenas)")
    
    try:
        # Abrir documento original
        doc_original = fitz.open(input_path)
        logger.info(f"üìÑ PDF carregado: {len(doc_original)} p√°ginas")
        
        # Criar novo documento LIMPO (sem metadados desnecess√°rios)
        doc_novo = fitz.open()
        
        # LIMPEZA COMPLETA DE METADADOS
        _limpar_metadados_completo(doc_novo)
        
        # Processar cada p√°gina com otimiza√ß√£o balanceada
        for num_pagina in range(len(doc_original)):
            logger.info(f"üîÑ Processando p√°gina {num_pagina + 1}/{len(doc_original)}")
            
            pagina_original = doc_original[num_pagina]
            
            # Criar nova p√°gina limpa
            pagina_nova = doc_novo.new_page(
                width=pagina_original.rect.width,
                height=pagina_original.rect.height
            )
            
            # Processar imagens com compress√£o balanceada
            stats_pagina = _processar_pagina_balanceada(pagina_original, pagina_nova)
            
            # Atualizar estat√≠sticas
            images_processed += stats_pagina['total_images']
            jpeg_images += stats_pagina['jpeg_images']
            png_images += stats_pagina['png_images']
            resized_images += stats_pagina['resized_images']
            
            # Copiar APENAS texto (sem imagens para n√£o anular compress√£o)
            _copiar_conteudo_texto_apenas(pagina_original, pagina_nova)
            
            pages_processed += 1
        
        # Fechar documento original
        doc_original.close()
        
        # Salvar PDF otimizado
        logger.info("üíæ Salvando PDF otimizado...")
        
        # Usar arquivo tempor√°rio para evitar problemas
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            temp_path = temp_file.name
        
        doc_novo.save(
            temp_path,
            garbage=4,          # Limpeza de estruturas
            deflate=True,       # Comprimir streams
            clean=True,         # Ativar limpeza
            ascii=False,        # Encoding bin√°rio
            expand=0,           # Manter compress√£o
            linear=False,       # N√£o linearizar
            pretty=False,       # N√£o formatar
            encryption=fitz.PDF_ENCRYPT_NONE,  # Sem criptografia
            permissions=-1,     # Todas as permiss√µes
            incremental=False   # Reescrever arquivo
        )
        
        # Substituir arquivo original
        shutil.move(temp_path, output_path)
        
        # Fechar documento novo
        doc_novo.close()
        
        # Calcular estat√≠sticas finais
        final_size = os.path.getsize(output_path)
        compression_ratio = ((original_size - final_size) / original_size) * 100
        
        logger.info("‚úÖ PDF OTIMIZADO criado com sucesso!")
        logger.info(f"üìä Estat√≠sticas do processamento:")
        logger.info(f"   üìÇ Tamanho original: {original_size / 1024 / 1024:.2f} MB")
        logger.info(f"   üì¶ Tamanho final: {final_size / 1024 / 1024:.2f} MB")
        logger.info(f"   üéØ Redu√ß√£o: {compression_ratio:.1f}%")
        logger.info(f"   üñºÔ∏è Total de imagens: {images_processed}")
        logger.info(f"   üì∏ JPEG processados: {jpeg_images}")
        logger.info(f"   üé® PNG processados: {png_images}")
        logger.info(f"   üìè Imagens redimensionadas: {resized_images}")
        logger.info(f"   üìÑ P√°ginas processadas: {pages_processed}")
        logger.info(f"   üßπ Metadados do documento removidos")
        logger.info(f"   üîß Otimiza√ß√£o suave aplicada (JPEG 95-98 qualidade m√°xima)")
        logger.info(f"   üìù Texto preservado com formata√ß√£o original")
        logger.info(f"   üñºÔ∏è Imagens: qualidade m√°xima preservada (s√≥ >1MB processadas)")
        logger.info(f"   ‚úÖ PRESERVA√á√ÉO M√ÅXIMA APLICADA")
        logger.info(f"   üéØ Configura√ß√£o: qualidade m√°xima preservada")
        
        # Verificar resultado da PRESERVA√á√ÉO M√ÅXIMA
        final_mb = final_size / 1024 / 1024
        
        if compression_ratio < 0:
            logger.info(f"üìä Arquivo ligeiramente maior ({abs(compression_ratio):.1f}%) - reconstru√ß√£o limpa aplicada")
        elif compression_ratio < 10:
            logger.info(f"üìä Tamanho mantido ({compression_ratio:.1f}%) - qualidade m√°xima preservada!")
        elif compression_ratio < 25:
            logger.info(f"üìä Otimiza√ß√£o suave ({compression_ratio:.1f}%) - qualidade totalmente preservada!")
        else:
            logger.info(f"üìä Limpeza eficiente ({compression_ratio:.1f}%) - apenas metadados removidos!")
        
        logger.info(f"üìä Arquivo final: {final_mb:.1f}MB com qualidade m√°xima preservada")
        
        return {
            'success': True,
            'original_size': original_size,
            'final_size': final_size,
            'compression_ratio': compression_ratio,
            'images_processed': images_processed,
            'pages_processed': pages_processed,
            'jpeg_images': jpeg_images,
            'png_images': png_images,
            'resized_images': resized_images,
            'error_message': None
        }
        
    except Exception as e:
        error_msg = f"Erro durante otimiza√ß√£o inteligente: {str(e)}"
        logger.error(error_msg)
        
        return {
            'success': False,
            'original_size': original_size,
            'final_size': 0,
            'compression_ratio': 0,
            'images_processed': images_processed,
            'pages_processed': pages_processed,
            'jpeg_images': jpeg_images,
            'png_images': png_images,
            'resized_images': resized_images,
            'error_message': error_msg
        }


def _processar_pagina_balanceada(pagina_original: fitz.Page, pagina_nova: fitz.Page) -> Dict[str, Any]:
    """
    Processa p√°gina preservando QUALIDADE M√ÅXIMA das imagens.
    
    ‚ö†Ô∏è ATEN√á√ÉO CR√çTICA: NUNCA alterar o limite de 1MB (1024*1024)
    Esta configura√ß√£o foi TESTADA e √© a √öNICA que funciona sem destruir arquivos!
    
    Funcionalidades:
    - Preserva qualidade m√°xima das imagens (JPEG 95-98)
    - Redimensiona apenas se extremamente grandes (>3000px)
    - Processa apenas imagens muito grandes (>1MB) ‚ö†Ô∏è VALOR CR√çTICO
    - Foco na preserva√ß√£o m√°xima de qualidade visual
    
    Args:
        pagina_original: P√°gina de origem 
        pagina_nova: P√°gina de destino (limpa)
        
    Returns:
        Dict com estat√≠sticas das imagens processadas
    """
    stats = {
        'total_images': 0,
        'jpeg_images': 0,
        'png_images': 0,
        'resized_images': 0
    }
    
    try:
        # Obter lista de imagens na p√°gina original
        lista_imagens = pagina_original.get_images(full=True)
        stats['total_images'] = len(lista_imagens)
        
        for img_index, img_ref in enumerate(lista_imagens):
            try:
                # Extrair refer√™ncia da imagem
                xref = img_ref[0]  # Refer√™ncia do objeto imagem
                
                # Obter dados da imagem original
                img_dict = pagina_original.parent.extract_image(xref)
                img_data = img_dict["image"]
                img_ext = img_dict["ext"]
                original_size = len(img_data)
                
                # Obter ret√¢ngulos onde a imagem aparece
                img_rects = pagina_original.get_image_rects(xref)
                
                # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                # ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ZONA CR√çTICA - N√ÉO ALTERAR NADA ABAIXO! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
                # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                # ‚ö†Ô∏è LINHA CR√çTICA - N√ÉO ALTERAR! ‚ö†Ô∏è
                # Esta √© a √öNICA configura√ß√£o que funciona sem destruir arquivos
                # TESTADO e APROVADO: 1024 * 1024 (1MB) √© o limite seguro
                # NUNCA alterar este valor - qualquer mudan√ßa causa problemas!
                if HAS_PIL and original_size > 1024 * 1024:  # ‚ö†Ô∏è CR√çTICO: > 1MB - N√ÉO MEXER! ‚ö†Ô∏è
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    # ‚úÖ FIM DA ZONA CR√çTICA - Configura√ß√£o testada e aprovada acima ‚úÖ
                    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    try:
                        # Converter para PIL Image
                        pil_image = Image.open(io.BytesIO(img_data))
                        pil_image = ImageOps.exif_transpose(pil_image)
                        
                        # Redimensionar apenas se extremamente grande (m√°xima preserva√ß√£o)
                        redimensionada = False
                        if pil_image.size[0] > 3000 or pil_image.size[1] > 3000:
                            pil_image, redimensionada = _redimensionar_balanceado(pil_image)
                            if redimensionada:
                                stats['resized_images'] += 1
                        
                        # Comprimir com qualidade m√°xima
                        formato_final, img_data_comprimida = _comprimir_balanceado(pil_image)
                        
                        # Usar imagem comprimida apenas se redu√ß√£o m√≠nima (preservar qualidade)
                        if len(img_data_comprimida) < original_size * 0.90:  # Apenas se reduzir pelo menos 5%
                            img_data = img_data_comprimida
                            logger.debug(f"   üóúÔ∏è Imagem {img_index + 1}: {original_size//1024}KB ‚Üí {len(img_data)//1024}KB ({formato_final})")
                        else:
                            logger.debug(f"   ‚úÖ Imagem {img_index + 1}: mantida original ({original_size//1024}KB, {img_ext.upper()})")
                            
                    except Exception as compress_error:
                        logger.debug(f"   ‚ö†Ô∏è Erro na compress√£o da imagem {img_index + 1}, usando original: {compress_error}")
                
                # Inserir imagem (original ou comprimida)
                for rect in img_rects:
                    try:
                        pagina_nova.insert_image(
                            rect=rect,
                            stream=img_data,
                            keep_proportion=True,
                            alpha=255
                        )
                    except Exception as insert_error:
                        logger.warning(f"   ‚ö†Ô∏è Erro ao inserir imagem {img_index + 1}: {insert_error}")
                        continue
                
                # Atualizar estat√≠sticas baseado no formato original
                if img_ext.lower() in ['jpg', 'jpeg']:
                    stats['jpeg_images'] += 1
                elif img_ext.lower() == 'png':
                    stats['png_images'] += 1
                
            except Exception as ref_error:
                logger.warning(f"   ‚ö†Ô∏è Erro ao processar refer√™ncia de imagem {img_index + 1}: {ref_error}")
                continue
    
    except Exception as page_error:
        logger.warning(f"‚ö†Ô∏è Erro ao extrair imagens da p√°gina: {page_error}")
    
    return stats


def _redimensionar_balanceado(pil_image: Image.Image) -> Tuple[Image.Image, bool]:
    """
    Redimensiona imagem de forma BALANCEADA para meta de 3.5-4MB.
    
    Estrat√©gia balanceada:
    - Reduz para 85% da resolu√ß√£o se > 1800px
    - Limite m√°ximo de 2500px em qualquer dimens√£o
    - Equil√≠brio entre qualidade visual e tamanho
    
    Args:
        pil_image: Imagem PIL
        
    Returns:
        Tuple[Image.Image, bool]: (imagem_redimensionada, foi_redimensionada)
    """
    try:
        # Dimens√µes da imagem original
        img_width, img_height = pil_image.size
        
        # REDIMENSIONAMENTO CONSERVADOR
        new_width = img_width
        new_height = img_height
        foi_redimensionada = False
        
        # Redimensionar apenas se extremamente grandes (m√°xima preserva√ß√£o)
        max_useful_dimension = 2500  # Dimens√£o mais permissiva
        if img_width > max_useful_dimension or img_height > max_useful_dimension:
            if img_width > img_height:
                new_width = max_useful_dimension
                new_height = int((max_useful_dimension * img_height) / img_width)
            else:
                new_height = max_useful_dimension
                new_width = int((max_useful_dimension * img_width) / img_height)
            foi_redimensionada = True
            logger.debug(f"   üìè Redimensionamento inteligente: {img_width}x{img_height} ‚Üí {new_width}x{new_height}")
        else:
            logger.debug(f"   üìè Imagem mantida em tamanho adequado: {img_width}x{img_height}")
        
        # Garantir dimens√µes m√≠nimas
        new_width = max(new_width, 100)
        new_height = max(new_height, 100)
        
        if foi_redimensionada:
            # Redimensionar usando algoritmo de alta qualidade
            resized_image = pil_image.resize(
                (new_width, new_height), 
                Image.Resampling.LANCZOS  # Algoritmo de alta qualidade
            )
            
            logger.debug(f"   üìè Redimensionamento balanceado: {img_width}x{img_height} ‚Üí {new_width}x{new_height}")
            return resized_image, True
        
        return pil_image, False
        
    except Exception as e:
        logger.warning(f"Erro no redimensionamento balanceado: {e}")
        return pil_image, False


def _comprimir_balanceado(pil_image: Image.Image) -> Tuple[str, bytes]:
    """
    Comprime imagem usando estrat√©gias BALANCEADAS para meta de 3.5-4MB.
    
    Estrat√©gias balanceadas:
    - JPEG: Qualidade 70-80 (balanceada)
    - PNG: Para gr√°ficos muito simples apenas
    - An√°lise inteligente priorizando legibilidade
    
    Args:
        pil_image: Imagem PIL para comprimir
        
    Returns:
        Tuple[str, bytes]: (formato_escolhido, dados_comprimidos)
    """
    try:
        # An√°lise de conte√∫do da imagem (balanceada)
        formato_otimo = _analisar_conteudo_balanceado(pil_image)
        
        if formato_otimo == 'JPEG':
            return _comprimir_jpeg_balanceado(pil_image)
        else:
            return _comprimir_png_balanceado(pil_image)
            
    except Exception as e:
        logger.warning(f"Erro na compress√£o balanceada: {e}")
        # Fallback para JPEG balanceado
        return _comprimir_jpeg_balanceado(pil_image)


def _analisar_conteudo_balanceado(pil_image: Image.Image) -> str:
    """
    An√°lise BALANCEADA que prioriza JPEG para meta de 3.5-4MB.
    
    Crit√©rios restritivos para PNG, priorizando JPEG balanceado na maioria dos casos
    para alcan√ßar tamanho adequado mantendo legibilidade.
    
    Args:
        pil_image: Imagem PIL
        
    Returns:
        str: 'JPEG' para maioria das imagens, 'PNG' apenas para casos muito espec√≠ficos
    """
    try:
        # Converter para RGB para an√°lise r√°pida
        if pil_image.mode not in ['RGB', 'RGBA']:
            temp_image = pil_image.convert('RGB')
        else:
            temp_image = pil_image
        
        # An√°lise r√°pida (amostra menor)
        sample_size = 100
        if temp_image.size[0] > sample_size or temp_image.size[1] > sample_size:
            temp_image.thumbnail((sample_size, sample_size), Image.Resampling.NEAREST)
        
        # Contar cores √∫nicas (aproximado)
        colors = temp_image.getcolors(maxcolors=64*64*64)  # Menor limite para ser mais r√°pido
        if colors is None:
            # Muitas cores - usar JPEG
            return 'JPEG'
        
        unique_colors = len(colors)
        pixel_count = temp_image.size[0] * temp_image.size[1]
        
        # CRIT√âRIOS MUITO RESTRITIVOS para PNG (priorizar JPEG balanceado)
        # Usar PNG apenas para gr√°ficos muito simples e pequenos
        if (unique_colors <= 32 and           # At√© 32 cores apenas (muito restritivo)
            pixel_count < 10000 and           # Apenas imagens muito pequenas
            unique_colors < pixel_count * 0.05):  # Cores representam <5% dos pixels (muito restritivo)
            
            logger.debug(f"   üé® PNG restrito: {unique_colors} cores em {pixel_count} pixels")
            return 'PNG'
        else:
            logger.debug(f"   üì∑ JPEG balanceado: {unique_colors} cores em {pixel_count} pixels")
            return 'JPEG'
            
    except Exception as e:
        logger.debug(f"Erro na an√°lise balanceada: {e}")
        # Fallback: sempre JPEG para m√°xima compress√£o
        return 'JPEG'


def _comprimir_jpeg_balanceado(pil_image: Image.Image) -> Tuple[str, bytes]:
    """
    Comprime imagem como JPEG com qualidade balanceada.
    
    Args:
        pil_image: Imagem PIL
        
    Returns:
        Tuple[str, bytes]: ('JPEG', dados_comprimidos)
    """
    # Converter para RGB se necess√°rio
    if pil_image.mode in ['RGBA', 'P', 'LA']:
        # Para transpar√™ncia, criar fundo branco
        rgb_image = Image.new('RGB', pil_image.size, (255, 255, 255))
        if pil_image.mode == 'P':
            pil_image = pil_image.convert('RGBA')
        rgb_image.paste(pil_image, mask=pil_image.split()[-1] if pil_image.mode in ['RGBA', 'LA'] else None)
        pil_image = rgb_image
    elif pil_image.mode != 'RGB':
        pil_image = pil_image.convert('RGB')
    
    quality = _determine_jpeg_quality(pil_image)
    
    img_buffer = io.BytesIO()
    pil_image.save(
        img_buffer,
        format='JPEG',
        quality=quality,
        optimize=True,
        progressive=False,
        exif=b'',
        subsampling=0
    )
    
    return 'JPEG', img_buffer.getvalue()

def _determine_jpeg_quality(pil_image: Image.Image) -> int:
    """Determina qualidade JPEG baseada no tamanho da imagem."""
    pixels = pil_image.size[0] * pil_image.size[1]
    
    if pixels > ImageOptimizerConstants.LARGE_IMAGE_PIXELS:
        return ImageOptimizerConstants.JPEG_QUALITY_LARGE
    elif pixels > ImageOptimizerConstants.MEDIUM_IMAGE_PIXELS:
        return ImageOptimizerConstants.JPEG_QUALITY_MEDIUM
    else:
        return ImageOptimizerConstants.JPEG_QUALITY_SMALL


def _comprimir_png_balanceado(pil_image: Image.Image) -> Tuple[str, bytes]:
    """
    Comprime imagem como PNG otimizado.
    
    Args:
        pil_image: Imagem PIL
        
    Returns:
        Tuple[str, bytes]: ('PNG', dados_comprimidos)
    """
    pil_image = _optimize_png_colors(pil_image)
    
    img_buffer = io.BytesIO()
    pil_image.save(
        img_buffer,
        format='PNG',
        optimize=True,
        compress_level=ImageOptimizerConstants.PNG_COMPRESS_LEVEL,
        exif=b''
    )
    
    return 'PNG', img_buffer.getvalue()

def _optimize_png_colors(pil_image: Image.Image) -> Image.Image:
    """Otimiza cores de imagem PNG."""
    try:
        if pil_image.mode in ['RGB', 'RGBA']:
            quantized = pil_image.quantize(
                colors=ImageOptimizerConstants.PNG_MAX_COLORS,
                method=Image.Quantize.MEDIANCUT,
                dither=Image.Dither.FLOYDSTEINBERG
            )
            return quantized
        elif pil_image.mode == 'P':
            colors = pil_image.getcolors()
            if colors and len(colors) > ImageOptimizerConstants.PNG_VERY_SIMPLE_COLORS:
                quantized = pil_image.quantize(
                    colors=ImageOptimizerConstants.PNG_VERY_SIMPLE_COLORS, 
                    method=Image.Quantize.MEDIANCUT
                )
                return quantized
    except Exception:
        pass
    
    return pil_image


def _limpar_metadados_completo(doc: fitz.Document) -> None:
    """
    Remove TODOS os metadados desnecess√°rios do documento PDF.
    
    Funcionalidades:
    - Remove metadados de cria√ß√£o/modifica√ß√£o
    - Remove informa√ß√µes do produtor/criador
    - Remove palavras-chave e t√≠tulo
    - Remove informa√ß√µes de autoria
    - Limpa qualquer informa√ß√£o de tracking
    
    Args:
        doc: Documento PDF para limpar
    """
    try:
        # Limpar todos os metadados poss√≠veis
        metadata_keys = [
            'title', 'author', 'subject', 'keywords', 'creator', 'producer',
            'creationDate', 'modDate', 'trapped', 'encryption'
        ]
        
        for key in metadata_keys:
            try:
                doc.set_metadata({key: ""})
            except:
                pass
        
        # Remover informa√ß√µes XMP se existirem
        try:
            doc.set_xml_metadata("")
        except:
            pass
            
        logger.debug("   üßπ Metadados limpos completamente")
        
    except Exception as e:
        logger.debug(f"Erro ao limpar metadados: {e}")


def _copiar_conteudo_texto_apenas(pagina_origem: fitz.Page, pagina_destino: fitz.Page) -> None:
    """
    Copia APENAS TEXTO da p√°gina original, preservando formata√ß√£o.
    
    N√ÉO copia imagens para n√£o anular a compress√£o aplicada.
    - Mant√©m: texto com formata√ß√£o original
    - Remove: imagens (j√° foram otimizadas)
    - Preserva: fontes e cores do texto original
    
    Args:
        pagina_origem: P√°gina de origem
        pagina_destino: P√°gina de destino
    """
    try:
        # Copiar apenas texto preservando formata√ß√£o original
        text_dict = pagina_origem.get_text("dict")
        
        for block in text_dict["blocks"]:
            if "lines" in block:  # Bloco de texto
                for line in block["lines"]:
                    for span in line["spans"]:
                        text = span["text"]
                        if text.strip():  # Apenas se n√£o for vazio
                            try:
                                # Inserir preservando formata√ß√£o original
                                pagina_destino.insert_text(
                                    fitz.Point(span["bbox"][0], span["bbox"][1]),
                                    text,
                                    fontsize=span["size"],
                                    fontname=span.get("font", "helv"),
                                    color=span.get("color", 0)
                                )
                            except:
                                # Fallback com fonte b√°sica
                                try:
                                    pagina_destino.insert_text(
                                        fitz.Point(span["bbox"][0], span["bbox"][1]),
                                        text,
                                        fontsize=span["size"],
                                        color=span.get("color", 0)
                                    )
                                except:
                                    # Fallback final simples
                                    try:
                                        pagina_destino.insert_text(
                                            fitz.Point(span["bbox"][0], span["bbox"][1]),
                                            text,
                                            fontsize=12
                                        )
                                    except:
                                        pass
        
        logger.debug("   üìù Texto copiado (sem imagens)")
                                
    except Exception as e:
        logger.debug(f"Erro ao copiar texto: {e}")


# Fun√ß√µes auxiliares para o m√≥dulo

if __name__ == "__main__":
    """
    Exemplo de uso do otimizador de PDFs
    """
    exemplo_input = "exemplo_input.pdf"
    exemplo_output = "exemplo_output.pdf"
    
    if not os.path.exists(exemplo_input):
        print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {exemplo_input}")
        exit(1)
    
    print("üîÑ Processando PDF...")
    try:
        resultado = optimize_pdf_images(exemplo_input, exemplo_output, 'smart')
        if resultado['success']:
            print(f"‚úÖ Conclu√≠do! Arquivo salvo: {exemplo_output}")
            print(f"üìä Redu√ß√£o: {resultado['compression_ratio']:.1f}%")
        else:
            print(f"‚ùå Erro: {resultado['error_message']}")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")