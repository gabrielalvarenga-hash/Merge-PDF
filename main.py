import sys
import tkinter as tk
from tkinter import messagebox
from typing import Tuple, List

# Constantes para depend√™ncias
REQUIRED_DEPENDENCIES = [
    ('PyPDF2', 'PyPDF2 ou PyPDF4 n√£o encontrado.\nExecute: pip install PyPDF2'),
    ('PyCryptodome', 'PyCryptodome n√£o encontrado. Necess√°rio para PDFs criptografados.\nExecute: pip install PyCryptodome')
]

OPTIONAL_DEPENDENCIES = [
    ('tkinterdnd2', 'tkinterdnd2 n√£o encontrado. Drag & drop desabilitado.\nPara habilitar: pip install tkinterdnd2'),
    ('PIL', 'Pillow n√£o encontrado. √çcones desabilitados.\nPara habilitar: pip install Pillow'),
    ('fitz', 'PyMuPDF n√£o encontrado. Preview desabilitado.\nPara habilitar: pip install PyMuPDF')
]

def _check_pypdf_availability() -> bool:
    """Verifica se PyPDF2 ou PyPDF4 est√° dispon√≠vel."""
    try:
        import PyPDF2
        return True
    except ImportError:
        try:
            import PyPDF4 as PyPDF2
            return True
        except ImportError:
            return False

def _check_dependency(module_name: str) -> bool:
    """Verifica se um m√≥dulo espec√≠fico est√° dispon√≠vel."""
    try:
        if module_name == 'PyPDF2':
            return _check_pypdf_availability()
        elif module_name == 'PIL':
            from PIL import Image, ImageTk
            return True
        elif module_name == 'PyCryptodome':
            import Crypto
            return True
        else:
            __import__(module_name)
            return True
    except ImportError:
        return False

def check_dependencies() -> Tuple[List[str], List[str]]:
    """Verifica se as depend√™ncias necess√°rias est√£o instaladas.
    
    Returns:
        Tuple contendo listas de depend√™ncias ausentes e avisos
    """
    missing_deps = []
    warnings = []
    
    # Verificar depend√™ncias obrigat√≥rias
    for module, error_msg in REQUIRED_DEPENDENCIES:
        if not _check_dependency(module):
            missing_deps.append(error_msg)
    
    # Verificar depend√™ncias opcionais
    for module, warning_msg in OPTIONAL_DEPENDENCIES:
        if not _check_dependency(module):
            warnings.append(warning_msg)
    
    return missing_deps, warnings

def _show_missing_dependencies_error(missing_deps: List[str]) -> None:
    """Exibe erro para depend√™ncias obrigat√≥rias ausentes."""
    error_msg = "‚ùå Depend√™ncias obrigat√≥rias n√£o encontradas:\n\n" + "\n\n".join(missing_deps)
    messagebox.showerror("Depend√™ncias n√£o encontradas", error_msg)

def _show_optional_dependencies_warning(warnings: List[str]) -> None:
    """Exibe aviso para depend√™ncias opcionais ausentes."""
    warning_msg = "‚ö†Ô∏è Algumas funcionalidades estar√£o desabilitadas:\n\n" + "\n\n".join(warnings)
    warning_msg += "\n\n‚úÖ A aplica√ß√£o funcionar√°, mas com funcionalidades limitadas."
    print(warning_msg)

def show_dependency_info(missing_deps: List[str], warnings: List[str]) -> bool:
    """Mostra informa√ß√µes sobre depend√™ncias e retorna se pode continuar.
    
    Args:
        missing_deps: Lista de depend√™ncias obrigat√≥rias ausentes
        warnings: Lista de avisos sobre depend√™ncias opcionais
        
    Returns:
        True se a aplica√ß√£o pode continuar, False caso contr√°rio
    """
    if missing_deps:
        _show_missing_dependencies_error(missing_deps)
        return False
    
    if warnings:
        _show_optional_dependencies_warning(warnings)
    
    return True

def create_root_window() -> tk.Tk:
    """Cria janela root com suporte a drag & drop se dispon√≠vel.
    
    Returns:
        Inst√¢ncia de Tk com ou sem suporte a drag & drop
    """
    try:
        from tkinterdnd2 import TkinterDnD
        return TkinterDnD.Tk()
    except ImportError:
        return tk.Tk()

def _print_startup_message() -> None:
    """Imprime mensagem de inicializa√ß√£o."""
    print("üöÄ Iniciando PDF Merger App...")

def _print_feature_status() -> None:
    """Imprime status dos recursos dispon√≠veis."""
    print("‚úÖ Aplica√ß√£o iniciada com sucesso!")
    print("üìã Recursos dispon√≠veis:")
    print("   ‚Ä¢ Merge e compress√£o de PDFs ‚úÖ")
    
    features = {
        'tkinterdnd2': 'Drag & drop de arquivos',
        'PIL': '√çcones e logos',
        'fitz': 'Preview de PDFs'
    }
    
    for module, feature in features.items():
        status = "‚úÖ" if module in sys.modules else "‚ùå"
        print(f"   ‚Ä¢ {feature} {status}")

def _handle_import_error(error: ImportError) -> None:
    """Trata erros de importa√ß√£o de m√≥dulos."""
    error_msg = (
        f"‚ùå Erro ao importar m√≥dulos da aplica√ß√£o:\n{str(error)}\n\n"
        "Verifique se todos os arquivos est√£o presentes."
    )
    messagebox.showerror("Erro de importa√ß√£o", error_msg)
    print(error_msg)
    sys.exit(1)

def _handle_unexpected_error(error: Exception) -> None:
    """Trata erros inesperados durante inicializa√ß√£o."""
    error_msg = f"‚ùå Erro inesperado ao inicializar aplica√ß√£o:\n{str(error)}"
    messagebox.showerror("Erro", error_msg)
    print(error_msg)
    sys.exit(1)

def _initialize_application() -> None:
    """Inicializa a aplica√ß√£o principal."""
    print("ü™ü Criando janela principal...")
    root = create_root_window()
    
    from main_window import PDFMergerMainWindow
    
    print("‚öôÔ∏è Inicializando interface...")
    app = PDFMergerMainWindow(root)
    
    _print_feature_status()
    app.run()

def main() -> None:
    """Fun√ß√£o principal da aplica√ß√£o."""
    _print_startup_message()
    
    missing_deps, warnings = check_dependencies()
    
    if not show_dependency_info(missing_deps, warnings):
        print("‚ùå Encerrando devido a depend√™ncias faltando.")
        sys.exit(1)
    
    try:
        _initialize_application()
    except ImportError as e:
        _handle_import_error(e)
    except Exception as e:
        _handle_unexpected_error(e)

if __name__ == "__main__":
    main()
